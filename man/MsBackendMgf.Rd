% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/MsBackendMgf.R
\name{MsBackendMgf}
\alias{MsBackendMgf}
\alias{MsBackendMgf-class}
\alias{backendInitialize,MsBackendMgf-method}
\alias{spectraVariableMapping}
\alias{export,MsBackendMgf-method}
\title{MS data backend for mgf files}
\usage{
\S4method{backendInitialize}{MsBackendMgf}(
  object,
  files,
  mapping = spectraVariableMapping(),
  ...,
  BPPARAM = bpparam()
)

MsBackendMgf()

spectraVariableMapping(format = c("mgf"))

\S4method{export}{MsBackendMgf}(object, x, file = tempfile(), mapping = spectraVariableMapping(), ...)
}
\arguments{
\item{object}{Instance of \code{MsBackendMgf} class.}

\item{files}{\code{character} with the (full) file name(s) of the mgf file(s)
from which MS/MS data should be imported.}

\item{mapping}{for \code{backendInitialize} and \code{export}: named \code{character} vector
allowing to specify how fields from the MGF file should be renamed. Names
are supposed to be the spectra variable name and values of the vector
the field names in the MGF file. See output of \code{spectraVariableMapping()}
for the expected format and examples below or description above for
details.}

\item{...}{Currently ignored.}

\item{BPPARAM}{Parameter object defining the parallel processing
setup to import data in parallel. Defaults to \code{BPPARAM = bpparam()}. See \code{\link[=bpparam]{bpparam()}} for more information.}

\item{format}{for \code{spectraVariableMapping}: \code{character(1)} defining the
format to be used. Currently only \code{format = "mgf"} is supported.}

\item{x}{for \code{export}: an instance of \code{\link[=Spectra]{Spectra()}} class with the data that
should be exported.}

\item{file}{\code{character(1)} with the (full) file name to which the data
should be exported.}
}
\description{
The \code{MsBackendMgf} class supports import and export of MS/MS spectra data
from/to files in Mascot Generic Format
(\href{http://www.matrixscience.com/help/data_file_help.html}{mgf})
files. After initial import, the full MS data is kept in
memory. \code{MsBackendMgf} extends the \code{\link[=MsBackendDataFrame]{MsBackendDataFrame()}} backend
directly and supports thus the \code{\link[=applyProcessing]{applyProcessing()}} function to make
data manipulations persistent.

New objects are created with the \code{MsBackendMgf} function. The
\code{backendInitialize} method has to be subsequently called to
initialize the object and import MS/MS data from (one or more) mgf
files.

The \code{MsBackendMgf} backend provides an \code{export} method that allows to export
the data from the \code{Spectra} object (parameter \code{x}) to a file in mgf format.
See the package vignette for details and examples.

Default mappings from fields in the MGF file to spectra variable names are
provided by the \code{spectraVariableMapping} function. This function returns a
named character vector were names are the spectra variable names and the
values the respective field names in the MGF files. This named character
vector is submitted to the import and export function with parameter
\code{mapping}. It is also possible to pass own mappings (e.g. for special
MGF dialects) with the \code{mapping} parameter.
}
\examples{

## Create an MsBackendMgf backend and import data from test mgf files.
fls <- dir(system.file("extdata", package = "MsBackendMgf"),
    full.names = TRUE, pattern = "mgf$")
be <- backendInitialize(MsBackendMgf(), fls)
be

be$msLevel
be$intensity
be$mz

## The spectra variables that are available; note that not all of them
## have been imported from the MGF files.
spectraVariables(be)

## The variable "TITLE" represents the title of the spectrum defined in the
## MGF file
be$TITLE

## The default mapping of MGF fields to spectra variables is provided by
## the spectraVariableMapping function
spectraVariableMapping()

## We can provide our own mapping e.g. to map the MGF field "TITLE" to a
## variable named "spectrumName":
map <- c(spectrumName = "TITLE", spectraVariableMapping())
map

## We can then pass this mapping with parameter `mapping` to the
## backendInitialize method:
be <- backendInitialize(MsBackendMgf(), fls, mapping = map)

## The title is now available as variable named spectrumName
be$spectrumName

## Next we create a Spectra object with this data
sps <- Spectra(be)

## We can use the 'MsBackendMgf' also to export spectra data in mgf format.
out_file <- tempfile()
export(sps, backend = MsBackendMgf(), file = out_file, map = map)

## The first 20 lines of the generated file:
readLines(out_file, n = 20)

## Next we add a new spectra variable to each spectrum
sps$spectrum_idx <- seq_along(sps)

## This new spectra variable will also be exported to the mgf file:
export(sps, backend = MsBackendMgf(), file = out_file, map = map)
readLines(out_file, n = 20)
}
\author{
Laurent Gatto and Johannes Rainer
}
